/*
 * text_mode_vga_color.c
 * Minimal driver for text mode VGA support
 * This is for Week 2, with color support
 *
 *  Created on: Oct 25, 2021
 *      Author: zuofu
 */

#include <system.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <alt_types.h>
#include "text_mode_vga_color.h"
#include <stdio.h>
#include "system.h"
#include "altera_avalon_spi.h"
#include "altera_avalon_spi_regs.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"
#include "usb_kb/GenericMacros.h"
#include "usb_kb/GenericTypeDefs.h"
#include "usb_kb/HID.h"
#include "usb_kb/MAX3421E.h"
#include "usb_kb/transfer.h"
#include "usb_kb/usb_ch9.h"
#include "usb_kb/USB.h"
#include "time.h"

void textVGAColorClr()
{
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
}

void textVGADrawColorText(char* str, double x, double y, alt_u8 background, alt_u8 foreground)
{
	int i = 0;
	while (str[i]!=0)
	{
		vga_ctrl->VRAM[((int)ceil(y)*COLUMNS + (int)ceil(x) + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[((int)ceil(y)*COLUMNS + (int)ceil(x) + i) * 2 + 1] = str[i];
		i++;
	}
}

void setColorPalette (alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue)
{
	//fill in this function to set the color palette starting at offset 0x0000 2000 (from base)
	int regIdx = color >> 1;
	int i;
	if (color % 2 == 0) { // setting the right color in a register
		vga_ctrl->palette[regIdx] &= ~(0xFFF << 1);
		for (i = 1; i <= 4; i++) {
			vga_ctrl->palette[regIdx] |= (((blue >> (i - 1)) & 1) << i);
		}
		for (i = 5; i <= 8; i++) {
			vga_ctrl->palette[regIdx] |= (((green >> (i - 5)) & 1) << i);
		}
		for (i = 9; i <= 12; i++) {
			vga_ctrl->palette[regIdx] |= (((red >> (i - 9)) & 1) << i);
		}
	}
	else {
		vga_ctrl->palette[regIdx] &= ~(0xFFF << 13);
		for (i = 13; i <= 16; i++) {
			vga_ctrl->palette[regIdx] |= (((blue >> (i - 13)) & 1) << i);
		}
		for (i = 17; i <= 20; i++) {
			vga_ctrl->palette[regIdx] |= (((green >> (i - 17)) & 1) << i);
		}
		for (i = 21; i <= 24; i++) {
			vga_ctrl->palette[regIdx] |= (((red >> (i - 21)) & 1) << i);
		}
	}
}

void runGame()
{
	IOWR_ALTERA_AVALON_PIO_DATA(SW_RESET_BASE, 1);
	IOWR_ALTERA_AVALON_PIO_DATA(SW_RESET_BASE, 0);
	int keypressCount = 0;
	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
	BYTE device;
	WORD keycode;
	clock_t start, end;

	int seconds = 0;
	char color_string[80];
    int fg, bg, x, y;
    fg = 0;
    bg = 15;
	int currX = 5;
	int currY = 7;
	textVGAColorClr();
	//initialize palette
	for (int i = 0; i < 16; i++)
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}
	printf("initializing MAX3421E...\n");
	MAX3421E_init();
	printf("initializing USB...\n");
	USB_init();
	int lastFrameCharDrawn = 0;
	int move_tile = 0;
	int started = 0;
//	*SW_Start = 1;
	highlight[(currY - 2) / 5 - 1][(currX - 5) / 10] = 1;
	while(1)
	{
		MAX3421E_Task();
		USB_Task();

		rcode = kbdPoll(&kbdbuf);
		int kcode = kbdbuf.keycode[0];
		IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, kcode);
		printf("keycode: %d\n", kcode);
		if (kcode == 40 && started == 0) {
			IOWR_ALTERA_AVALON_PIO_DATA(STOPWATCH_BASE, 1);
			started = 1;
		}
		else if (kcode == 40 && started == 1) {
			IOWR_ALTERA_AVALON_PIO_DATA(STOPWATCH_BASE, 0);
			started = 0;
		}
		
		if (kcode == RIGHT && currX < 40) {
			highlight[(currY - 2) / 5 - 1][(currX - 5) / 10] = 0;
			currX += 10;
			highlight[(currY - 2) / 5 - 1][(currX - 5) / 10] = 1;
		}
		else if (kcode == DOWN && currY < 25) {
			highlight[(currY - 2) / 5 - 1][(currX - 5) / 10] = 0;
			currY += 5;
			highlight[(currY - 2) / 5 - 1][(currX - 5) / 10] = 1;
		}
		else if (kcode == LEFT && currX > 5) {
			highlight[(currY - 2) / 5 - 1][(currX - 5) / 10] = 0;
			currX -= 10;
			highlight[(currY - 2) / 5 - 1][(currX - 5) / 10] = 1;
		}
		else if (kcode == UP && currY > 7) {
			highlight[(currY - 2) / 5 - 1][(currX - 5) / 10] = 0;
			currY -= 5;
			highlight[(currY - 2) / 5 - 1][(currX - 5) / 10] = 1;
		}

		switch(kcode) {
			case A:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'A';
				break;
			case B:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'B';
				break;
			case C:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'C';
				break;
			case D:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'D';
				break;
			case E:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'E';
				break;
			case F:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'F';
				break;
			case G:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'G';
				break;
			case H:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'H';
				break;
			case I:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'I';
				break;
			case J:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'J';
				break;
			case K:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'K';
				break;
			case L:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'L';
				break;
			case M:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'M';
				break;
			case N:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'N';
				break;
			case O:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'O';
				break;
			case P:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'P';
				break;
			case Q:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'Q';
				break;
			case R:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'R';
				break;
			case S:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'S';
				break;
			case T:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'T';
				break;
			case U:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'U';
				break;
			case V:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'V';
				break;
			case W:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'W';
				break;
			case X:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'X';
				break;
			case Y:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'Y';
				break;
			case Z:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = 'Z';
				break;
			case BKSP:
				letters[((currY - 2) / 5 - 1)][(currX - 5) / 10] = '';
				break;
			
		}
		for(int i = 0; i < 5; i++) {
			for (int j = 0; j < 5; j++) {
				char character = letters[i][j];
				textVGADrawColorText (&character, j * 10 + 5, (i + 1) * 5 + 2, bg, fg);
				printf("%c ", letters[i][j]);
			}
			printf("\n");
  		}
//		usleep(18000);
	}
}



 void keyToText() {
 	char guess[5];
 	int fg, bg, x, y;
 	textVGAColorClr();
 	//initialize palette
 	for (int i = 0; i < 16; i++)
 	{
 		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
 		//printf("Palette %d : %x\n", i, vga_ctrl->palette[i>>1]>>1);
 	}

 	while (1) {
 		printf("Hello\n");
 		char one_char [2] = "A";
 		x = 25;
 		y = 65;
 		fg = 0;
 		bg = 15;
 		textVGADrawColorText(one_char, x, y, bg, fg);
 		usleep (100000);
 	}
 }
